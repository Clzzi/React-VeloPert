<REDUX-SAGA를 사용하면>
비동기 작업을 진행 할 때 기존 요청을 취소 할 수 있습니다.
특정 액션이 발생 했을 때
이에 따라 다른 액션을 디스패치 하거나 자바스크립트 코드를 실행 할 수있음
웹소켓을 사용하는경우 Channel 이라는 기능을 써서 더 효율적으로 코드 관리 가능
비동기 작업이 실패했을 때 재시도 하는 기능을 구현 가능

<Generator라는 문법>
함수의 흐름을 특정 구간에 멈췄다가 다시 실행 가능
결과값을 여러번 보낼 수 있다.

<Generator Example>
function* generatorFunction() {
   console.log('안녕');
   yield 1;
   console.log('제네레이터 함수');
   yield 2;
   console.log('function*');
   yield 3;
   return 4;
};

const generator = generatorFunction();

generator.next(); - suspended상태
// {value: 1, done: false}

generator.next(); - suspended상태
// {value: 2, done: false}

generator.next(); - suspended상태
// {value: 3, done: false}

generator.next(); - closed상태
// {value: 4, done: true}

generator.next(); - closed상태
// {value: undefined, done: true}

- - - - - - - - - - - - - - - - - - - - - - - 

function* sumGenerator() {
   console.log('sumGenerator 시작');
   let a = yield;
   console.log('a 값을 받음');
   let b = yield;
   console.log('b 값을 받음');
   return a + b;
};

const sum = sumGenerator();

sum.next(); - suspended
sumGenerator 시작
// {value: undefined, done: false }

sum.next(2); - suspended
a값 받음
// {value: undefined, done: false }
   
sum.next(5); - closed
b값 받음
// {value: 7, done: true }

- - - - - - - - - - - - - - - - - - - - - - - 

function* inifiniteAddGenerator() {
   let result = 0;
   while(true) {
	result += yield result;
   }
}

const add = inifiniteAddGenerator();

add.next();
// { value: 0, done: false }

add.next(10);
// { value: 10, done: false }

add.next(20);
// { value: 30, done: false }

add.next(30);
// { value: 60, done: false }

add.next(50);
// { value: 110, done: false }

add.next(100);
// { value: 210, done: false }
.
.
.
